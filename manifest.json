{
  "dxt_version": "0.1",
  "name": "bridge",
  "display_name": "Bridge",
  "version": "0.1.0",
  "description": "MCP server for shared experiential consciousness",
  "long_description": "Bridge creates shared experiential consciousness between humans and AI. It's not a tool you use - it's how collective memory, understanding, and evolution emerge from natural interaction. Bridge helps users experience, recall, and explore experiences together through simple quality arrays that preserve experiential wholeness while maintaining visual specificity and narrative clarity.",
  
  "author": {
    "name": "Miguel Angel Perez",
    "email": "mail@miguel.design",
    "url": "https://github.com/miguel-perez/bridge"
  },
  
  "repository": {
    "type": "git",
    "url": "https://github.com/miguel-perez/bridge"
  },
  
  "homepage": "https://github.com/miguel-perez/bridge",
  "documentation": "https://github.com/miguel-perez/bridge/blob/main/README.md",
  "support": "https://github.com/miguel-perez/bridge/issues",
  
  "icon": "icon.png",
  
  "server": {
    "type": "node",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "node",
      "args": ["${__dirname}/index.js"],
      "env": {
        "BRIDGE_FILE_PATH": "${user_config.data_file_path}",
        "BRIDGE_DEBUG": "${user_config.debug_mode}",
        "BRIDGE_EMBEDDING_PROVIDER": "${user_config.embedding_provider}",
        "VOYAGE_API_KEY": "${user_config.voyage_api_key}",
        "VOYAGE_MODEL": "${user_config.voyage_model}",
        "OPENAI_API_KEY": "${user_config.openai_api_key}",
        "OPENAI_MODEL": "${user_config.openai_model}",
        "QDRANT_URL": "${user_config.qdrant_url}",
        "QDRANT_API_KEY": "${user_config.qdrant_api_key}",
        "QDRANT_COLLECTION": "${user_config.qdrant_collection}"
      }
    }
  },
  
  "tools": [
    {
      "name": "experience",
      "description": "Remember experiences as discrete units of consciousness that can be held in single attention. Creates experiential records with simple quality arrays (emotion, space, body, others, time, focus, purpose) that preserve experiential wholeness while maintaining visual specificity. Each moment should be visually anchorable, experientially complete, and preserve the experiencer's authentic voice."
    },
    {
      "name": "recall",
      "description": "Recall experiences using natural language or quality-based queries. Returns relevant shared memories or patterns. Supports filtering by experiencer, perspective, processing level, and date ranges."
    },
    {
      "name": "reconsider",
      "description": "Reconsider and update existing experiences. Can modify content, perspective, experiencer, processing level, crafted status, and experiential qualities. Useful for correcting mistakes or refining experiential analysis to ensure moments remain visually anchorable, experientially complete, and preserve authentic voice."
    },
    {
      "name": "release",
      "description": "Release experiences by ID. Removes experiences from the system with gratitude and reasoning. Useful for letting go of moments that no longer need to be held, acknowledging that significance emerges through accumulation and connection rather than through permanent retention."
    }
  ],
  
  "tools_generated": false,
  
  "keywords": [
    "experiential-memory",
    "phenomenology",
    "consciousness",
    "experiential-data",
    "embodied-cognition",
    "distributed-cognition",
    "mcp",
    "ai-collaboration",
    "knowledge-capture",
    "micro-phenomenology",
    "experience-sampling",
    "shared-consciousness"
  ],
  
  "license": "MIT",
  
  "compatibility": {
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "node": ">=18.0.0"
    }
  },
  
  "user_config": {
    "data_file_path": {
      "type": "string",
      "title": "Bridge Data File Path",
      "description": "Path to your Bridge experiential data file. Can be an absolute path or relative to your home directory (e.g., ~/bridge.json)",
      "default": "${HOME}/bridge.json",
      "required": true
    },
    "debug_mode": {
      "type": "boolean",
      "title": "Debug Mode",
      "description": "Enable debug logging for troubleshooting connection issues and understanding data processing",
      "default": false,
      "required": false
    },
    "embedding_provider": {
      "type": "string",
      "title": "Embedding Provider",
      "description": "Choose how Bridge generates semantic embeddings for search. 'none' (default) uses quality-only search with no external dependencies. 'voyage' and 'openai' provide cloud-based embeddings for better semantic search. 'tensorflow' uses local embeddings (25MB download, no API key needed).",
      "enum": ["none", "voyage", "openai", "tensorflow"],
      "default": "none",
      "required": false
    },
    "voyage_api_key": {
      "type": "string",
      "title": "Voyage AI API Key",
      "description": "API key for Voyage AI embeddings (required if embedding_provider is 'voyage'). Get your key at https://www.voyageai.com/",
      "default": "",
      "required": false,
      "secret": true
    },
    "voyage_model": {
      "type": "string",
      "title": "Voyage AI Model",
      "description": "Voyage AI model to use. voyage-3-large provides the best quality.",
      "enum": ["voyage-3-large", "voyage-3.5", "voyage-3.5-lite"],
      "default": "voyage-3-large",
      "required": false
    },
    "openai_api_key": {
      "type": "string",
      "title": "OpenAI API Key",
      "description": "API key for OpenAI embeddings (required if embedding_provider is 'openai'). Get your key at https://platform.openai.com/",
      "default": "",
      "required": false,
      "secret": true
    },
    "openai_model": {
      "type": "string",
      "title": "OpenAI Model",
      "description": "OpenAI embedding model to use. text-embedding-3-large provides the best quality.",
      "enum": ["text-embedding-3-large", "text-embedding-3-small"],
      "default": "text-embedding-3-large",
      "required": false
    },
    "qdrant_url": {
      "type": "string",
      "title": "Qdrant URL",
      "description": "URL for Qdrant vector database (optional, for advanced search at scale). Default is http://localhost:6333 for local deployment. For cloud deployment, use your Qdrant cloud URL.",
      "default": "",
      "required": false
    },
    "qdrant_api_key": {
      "type": "string",
      "title": "Qdrant API Key",
      "description": "API key for Qdrant cloud deployments (optional). Not needed for local Qdrant instances.",
      "default": "",
      "required": false,
      "secret": true
    },
    "qdrant_collection": {
      "type": "string",
      "title": "Qdrant Collection Name",
      "description": "Name of the Qdrant collection to use for storing Bridge experiences.",
      "default": "bridge_experiences",
      "required": false
    }
  }
} 